{"version":3,"sources":["webpack:///./node_modules/@firebase/util/dist/index.esm2017.js","webpack:///./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack:///./node_modules/@firebase/database/dist/index.esm2017.js","webpack:///./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack:///./src/views/toDoList.vue?67a9","webpack:///./src/views/toDoList.vue","webpack:///./node_modules/@element-plus/icons-vue/dist/es/_virtual/plugin-vue_export-helper.mjs","webpack:///./node_modules/@element-plus/icons-vue/dist/es/delete.mjs","webpack:///./node_modules/firebase/app/dist/index.esm.js","webpack:///./src/views/toDoList.vue?6bb5","webpack:///./node_modules/core-js/modules/es.array.splice.js","webpack:///./node_modules/@firebase/logger/dist/esm/index.esm2017.js"],"names":["CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","join","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","this","HAS_NATIVE_SUPPORT","atob","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","btoa","encodeByteArray","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","ENCODED_VALS","ENCODED_VALS_WEBSAFE","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","decodeString","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","dateValue","getTime","prop","hasOwnProperty","isValidKey","key","Deferred","reject","resolve","promise","Promise","callback","catch","createMockUserToken","token","projectId","uid","header","alg","type","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","JSON","stringify","getUA","navigator","isMobileCordova","window","test","isReactNative","isNodeSdk","ERROR_NAME","FirebaseError","code","customData","super","name","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","jsonEval","parse","decode","claims","parts","split","isValidFormat","decoded","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","buf","offset","W","t","f","d","lengthMinusBlock","n","inbuf","compress_","digest","totalBits","update","j","errorPrefix","fnName","argName","stringToByteArray","high","low","stringLength","getModularInstance","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","mode","props","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","get","options","_a","optional","isComponentEager","instanceDeferred","delete","services","from","values","all","filter","INTERNAL","_delete","opts","isComponentSet","normalizedDeferredIdentifier","existingCallbacks","Set","add","existingInstance","callbacks","normalizeIdentifierForFactory","invokeOnInitCallbacks","ComponentContainer","providers","provider","getProvider","setComponent","addComponent","version","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","varArgs","arg","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","remove","logWrapper","prefix","fatal","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","substring","each","doubleToIEEE754String","v","ebits","fbits","bias","s","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","href","isWindowsStoreApp","Windows","UI","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","then","forceRefresh","getToken","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","newHost","isCacheableHost","toURLString","query","repoInfoNeedsQueryParam","repoInfo","isCustomHost","repoInfoConnectionURL","connURL","pairs","StatsCollection","counters_","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","match","parseFloat","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","clearInterval","setInterval","send","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","ALL_TRANSPORTS","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","stats","EventEmitter","allowedEvents_","listeners_","eventType","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","online_","trigger","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","r","sendRequest","initConnection_","request","_path","q","_queryObject","outstandingGet","index","sendGet_","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","delta","serverTimeOffset","put","normalizedPathString","statusCode","explanation","notifyForInvalidToken","queries","clientName","reportStats","currentlyOnline","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","val","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","newIndex","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","MAX_NODE","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","queryParamsGetNodeFilter","queryParams","hasLimit","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","tree","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","indexedValueChanged","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","getPredecessorChildName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","LISTEN_COMPLETE","viewProcessorListenComplete","getChanges","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","isCompleteForPath","getCompleteChild","newEventSnap","viewProcessorCacheHasChild","changedChildren","curViewCache","foreach","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteNode","view","viewGetCompleteServerCache","cache","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistration","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointApplyOperation","syncPoint","optCompleteServerCache","concat","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointGetCompleteServerCache","syncTreeSetReferenceConstructor","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","changeTree","fromObject","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedQueryMerge","syncTreeCalcCompleteEventCache","includeHiddenSets","findOnPath","syncTreeGetServerValue","foreachOnPath","pathToSyncPoint","sp","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","existing","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidRootPathString","validateFirebaseData","hasDotValue","hasActualChild","validatePathString","argumentName","validateRootPathString","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","repoUpdateInfo","serverSyncTree_","unlisten","repoServerTime","offsetNode","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoGetValue","cached","err","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","QueryImpl","_repo","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","parentPath","ref","DataSnapshot","_node","_index","childRef","exportVal","db","_checkNotDeleted","_root","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","getDatabase","registerDatabase","variant","setMultipleInstances","simpleListen","echo","onEcho","PlatformLoggerServiceImpl","getProviders","isVersionServiceProvider","library","logString","getComponent","name$o","version$1","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","PLATFORM_LOG_STRING","_apps","_components","_addComponent","debug","_registerComponent","componentName","_getProvider","ERRORS","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","initializeApp","rawConfig","existingApp","newApp","getApp","registerVersion","libraryKeyOrName","libraryMismatch","versionMismatch","warning","registerCoreComponents","class","inputValue","placeholder","addTodo","todos","item","removeTodo","clearAll","writeUserData","_export_sfc","sfc","__vccOpts","_sfc_main","width","height","viewBox","xmlns","fill","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","firebaseConfig","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","components","Delete","methods","firebase_data","dbRef","snapshot","exists","render","$","toAbsoluteIndex","toInteger","toLength","toObject","arraySpeciesCreate","createProperty","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","proto","forced","deleteCount","insertCount","actualDeleteCount","A","O","actualStart","argumentsLength","arguments","TypeError","LogLevel","levelStringToEnum","DEBUG","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","setLogLevel","level","inst","setUserLogHandler","logCallback","customLogLevel","userLogHandler","ignored"],"mappings":"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","file":"assets/js/chunk-fe4b8ff8.a04b0c0c.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(code, message, customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined') {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.11\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.6.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","export { default } from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./toDoList.vue?vue&type=style&index=0&lang=scss\"; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./toDoList.vue?vue&type=style&index=0&lang=scss\"","<template>\n    <div class=\"div-box\">\n        <h5>To Do List</h5>\n        <el-input v-model=\"inputValue\" placeholder=\"輸入一項待辦事項\" v-on:keyup.enter=\"addTodo()\" />\n        <el-divider></el-divider>\n        <ul>\n            <li v-for=\"(item, index) in todos\" :key=\"item\">\n                <span>{{item}}</span>\n                <el-button v-on:click=\"removeTodo(index)\">\n                    <i class=\"fas fa-trash-alt\"></i>\n                </el-button>\n            </li>\n        </ul>\n        <el-divider></el-divider>\n        <div v-if=\"todos.length !=0\">\n            Total : {{todos.length}} todo\n            <el-button v-on:click=\"clearAll\" type=\"danger\">\n                <el-icon><Delete /></el-icon>\n            </el-button>\n        </div>\n        <el-button v-on:click=\"writeUserData()\">取得資料庫資料</el-button>\n    </div>\n</template>\n\n<style lang=\"scss\">\n.div-box{\n    margin: 0 auto;\n    width: 300px;\n    li{\n        margin-bottom: 5px;\n        list-style: none;\n        span{\n            margin-right: 5px;\n        }\n    }\n}\n</style>\n\n<script>\nimport { Delete } from \"@element-plus/icons-vue\";\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, child, get } from \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB900FNxKYIwpFvlFcs4SqZro8bHPiqxvs\",\n  authDomain: \"fantzulin-e590c.firebaseapp.com\",\n  databaseURL: \"https://fantzulin-e590c-default-rtdb.firebaseio.com\",\n  projectId: \"fantzulin-e590c\",\n  storageBucket: \"fantzulin-e590c.appspot.com\",\n  messagingSenderId: \"937701848678\",\n  appId: \"1:937701848678:web:d30e705555247cb5b11fa7\",\n  measurementId: \"G-C1JLS7P3PL\"\n};\n\nconst app = initializeApp(firebaseConfig);\nexport default {\n    data() {\n        return {\n            todos: ['假資料'],\n            inputValue: '',\n        }\n    },\n\n    components: {\n        Delete,\n    },\n\n    methods: {\n        addTodo(){\n            this.todos.push(this.inputValue);\n            console.log(this.todos);\n            this.inputValue = '';\n        },\n\n        removeTodo(index){\n            this.todos.splice(index, 1); // 使用陣列方法splice(指定的index開始，刪除一筆)，依照抓到的 index 刪除\n        },\n\n        clearAll(){\n            this.todos = []; // 把儲存陣列的 todos 用空陣列賦值清空\n        },\n\n        writeUserData(){\n            let firebase_data = \"\";\n            const dbRef = ref(getDatabase(app));\n            get(child(dbRef, \"/food\")).then((snapshot) => {\n                if (snapshot.exists()) {\n                    firebase_data = snapshot.val()[1].name;\n                    this.todos.push(firebase_data);\n                    console.log(\"firebase_data\", firebase_data);\n                } else {\n                    console.log(\"No data available\");\n                }\n            }).catch((error) => {\n                console.error(error);\n            });\n        }\n    },\n}\n</script>","var _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\n\nexport { _export_sfc as default };\n","import { defineComponent, openBlock, createElementBlock, createElementVNode } from 'vue';\nimport _export_sfc from './_virtual/plugin-vue_export-helper.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"Delete\"\n});\nconst _hoisted_1 = {\n  class: \"icon\",\n  width: \"200\",\n  height: \"200\",\n  viewBox: \"0 0 1024 1024\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nconst _hoisted_2 = /* @__PURE__ */ createElementVNode(\"path\", {\n  fill: \"currentColor\",\n  d: \"M160 256H96a32 32 0 010-64h256V95.936a32 32 0 0132-32h256a32 32 0 0132 32V192h256a32 32 0 110 64h-64v672a32 32 0 01-32 32H192a32 32 0 01-32-32V256zm448-64v-64H416v64h192zM224 896h576V256H224v640zm192-128a32 32 0 01-32-32V416a32 32 0 0164 0v320a32 32 0 01-32 32zm192 0a32 32 0 01-32-32V416a32 32 0 0164 0v320a32 32 0 01-32 32z\"\n}, null, -1);\nconst _hoisted_3 = [\n  _hoisted_2\n];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"svg\", _hoisted_1, _hoisted_3);\n}\nvar _delete = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _delete as default };\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.6.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { render } from \"./toDoList.vue?vue&type=template&id=0b44fcac\"\nimport script from \"./toDoList.vue?vue&type=script&lang=js\"\nexport * from \"./toDoList.vue?vue&type=script&lang=js\"\n\nimport \"./toDoList.vue?vue&type=style&index=0&lang=scss\"\nscript.render = render\n\nexport default script","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.es/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n"],"sourceRoot":""}